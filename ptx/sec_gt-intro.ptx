<?xml version="1.0" encoding="UTF-8"?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_gt-intro" permid="HLu">
<title>Graph Theory</title>
<introduction permid="xzK">
  <investigation permid="dGT">
    <p permid="uFe">
        In the time of Euler, in the town of Königsberg in Prussia,
        there was a river containing two islands.
        The islands were connected to the banks of the river by seven bridges
        (as seen below).
        The bridges were very beautiful, and on their days off,
        townspeople would spend time walking over the bridges.
        As time passed, a question arose:
        was it possible to plan a walk so that you cross each bridge once and only once?
        Euler was able to answer this question.
        Are you?
    </p>

    <sidebyside width="80%" permid="YXa">

      <image xml:id="gt-bridges-art" permid="fwg">

        <latex-image> \begin{tikzpicture}[scale=0.9]
\definecolor{land}{HTML}{BCC3A6}
\definecolor{water}{HTML}{92A2FF}
\definecolor{bridge}{HTML}{D3AC6B}
\clip (-6,-2.8) rectangle (5.9,2.5); \fill[color=water] (-6,-1.3) rectangle (5.5,1.19);
\draw[thick, fill=land] plot[smooth cycle] coordinates {(0,0) (-.5, .5) (-1,.6) (-2, .7) (-3,.5) (-3.3, -.7) (-2.8, -.8) (-1,-.7) (-.3, -.5)};
\draw[thick, fill=land] plot[smooth cycle] coordinates {(.5,0) (.4,.5) (1,.6) (2,.5) (2.7,0) (2.9,-.6) (2,-.8) (1,-.5) (.7,-.4)};
\shade[bottom color=land, top color=white!90!land] plot[smooth] coordinates {(-6,.2) (-4.5,.4) (-3,1) (0,.8) (1.5,1) (3,.5) (5.5,.2)} -- plot coordinates {(5.5,3) (-6,3)};
\draw[thick] plot[smooth] coordinates {(-6,.2) (-4.5,.4) (-3,1) (0,.8) (1.5,1) (3,.5) (5.5,.2)};
\shade[top color=land, bottom color=white!75!land] plot[smooth] coordinates {(-6,-.7) (-4.5,-.6) (-3,-1.2) (0,-1) (3,-1.1) (5,-.8) (5.5,-.7)} -- plot coordinates {(5.5,-3) (-6,-3)};
\draw[thick] plot[smooth] coordinates {(-6,-.7) (-4.5,-.6) (-3,-1.2) (0,-1) (3,-1.1) (5,-.8) (5.5,-.7)}; \path[fill=bridge] (-.3,.1) to[out=-10, in=190] (.8,.1) -- (.7, -.2) to[out=170, in=10] (-.35,-.2) -- cycle;
\draw[thick] (-.3,.1) to[out=-10, in=190] (.8,.1) (.7, -.2) to[out=170, in=10] (-.35,-.2); \path[fill=bridge] (1.75,-1.5) to[out=100, in=260] (1.85,-.5) -- (1.55, -.4) to[out=280, in=80] (1.5,-1.4) -- cycle;
\draw[thick] (1.75,-1.5) to[out=100, in=260] (1.85,-.5) (1.55, -.4) to[out=280, in=80] (1.5,-1.4); \path[fill=bridge] (1.6,.35) to[out=100, in=280] (1.35,1.3) -- (1.1, 1.2) to[out=300, in=110] (1.4,.3) -- cycle;
\draw[thick] (1.6,.35) to[out=100, in=280] (1.35,1.3) (1.1, 1.2) to[out=300, in=110] (1.4,.3); \path[fill=bridge] (-.7,.35) to[out=70, in=240] (-.3,1.1) -- (-.5, 1.2) to[out=250, in=60] (-.9,.45) -- cycle;
\draw[thick] (-.7,.35) to[out=70, in=240] (-.3,1.1) (-.5, 1.2) to[out=250, in=60] (-.9,.45); \path[fill=bridge] (-2.05,.5) to[out=105, in=270] (-2.15,1.4) -- (-2.4, 1.35) to[out=280, in=90] (-2.3,.45) -- cycle;
\draw[thick] (-2.05,.5) to[out=105, in=270] (-2.15,1.4) (-2.4, 1.35) to[out=280, in=90] (-2.3,.45); \path[fill=bridge] (-2.75,-1.5) to[out=85, in=250] (-2.5,-.6) -- (-2.75, -.5) to[out=260, in=75] (-3,-1.45) -- cycle;
\draw[thick] (-2.75,-1.5) to[out=85, in=250] (-2.5,-.6) (-2.75, -.5) to[out=260, in=75] (-3,-1.45); \path[fill=bridge] (-.7,-1.5) to[out=100, in=260] (-.7,-.5) -- (-1, -.55) to[out=280, in=80] (-1,-1.45) -- cycle;
\draw[thick] (-.7,-1.5) to[out=100, in=260] (-.7,-.5) (-1, -.55) to[out=280, in=80] (-1,-1.45);
\end{tikzpicture}
        </latex-image>
      </image>

    </sidebyside>
  </investigation>
  <p permid="aMn">
      Graph Theory is a relatively new area of mathematics,
      first studied by the super famous mathematician Leonhard Euler in 1735.
      Since then it has blossomed in to a powerful tool used in nearly every branch of science and is currently an active area of mathematics research.
  </p>

  <p permid="GTw">
      The problem above, known as the
    <em>Seven Bridges of Königsberg</em>,
    <idx>
      <h>Königsberg</h>
    </idx>
      is the problem that originally inspired graph theory.
      Consider a <q>different</q> problem: Below is a drawing of four dots connected by some lines.
      Is it possible to trace over each line once and only once (without lifting up your pencil,
      starting and ending on a dot)?
  </p>

  <sidebyside width="20%" permid="Fej">

    <image xml:id="gt-bridges-graph" permid="LDp">

      <latex-image> \begin{tikzpicture}[scale=0.9, yscale=.5]
\draw (-1,-2) \v to [out=120, in=240] (-1,0) \v to [out=120, in=240] (-1,2) \v to [out=300, in=60] (-1,0) to [out=300, in=60] (-1,-2);
\draw (1,0) \v -- (-1,2) (-1,0) -- (1,0) -- (-1,-2);
\end{tikzpicture}
      </latex-image>
    </image>

  </sidebyside>

  <p permid="naF">
      There is an obvious connection between these two problems.
      Any path in the dot and line drawing corresponds exactly to a path over the bridges of Königsberg.
  </p>

  <p permid="ThO">
      Pictures like the dot and line drawing are called <term>graphs</term>.
      Graphs are made up of a collection of dots called <term>vertices</term>
    <idx>
      <h>vertices</h>
    </idx>
      (singular: <term>vertex</term>) and lines connecting those dots called <term>edges</term>.
    <idx>
      <h>edges</h>
    </idx>
      When two vertices are connected by an edge,
      we say they are <term>adjacent</term>.
    <idx>
      <h>adjacent</h>
    </idx>
      The nice thing about looking at graphs instead of pictures of rivers,
      islands and bridges is that we now have a mathematical object to study.
      We have distilled the <q>important</q>
      parts of the bridge picture for the purposes of the problem.
      It does not matter how big the islands are,
      what the bridges are made out of,
      if the river contains alligators, etc.
      All that matters is which land masses are connected to which other land masses, and how many times.
          <!-- This was the great insight that Euler had. -->
  </p>
</introduction>
<subsection xml:id="subsec-gt-questions">
  <title>Questions about Graphs</title>
  <p>
    Let's consider a few more typical problems about graphs, and the <q>real world</q> problems they help solve.  Along the way we will introduce a fair amount of vocabulary about graphs, which we will summarize at the end of the section.
  </p>

  <p>
    Graphs are useful in describing relationships between things.  The <q>things</q> might be numbers, or people, or cities, for example.  The relationships will be equally varied, but for now, we will insist that the relationships need to go both ways.  That is, if <m>a</m> is related to <m>b</m>, we need <m>b</m> to be related to <m>a</m>.
  </p>

  <example permid="MII">
    <statement>
      <p permid="iqM">
          Al, Bob, Cam, Dan,
          and Euler are all members of the social networking website <em>Facebook</em>.
          The site allows members to be <q>friends</q> with each other.
          It turns out that Al and Cam are friends, as are Bob and Dan.
          Euler is friends with everyone.
          Represent this situation with a graph.
      </p>
    </statement>
    <solution permid="JOc">
      <p permid="Wcu">
          Each person will be represented by a vertex and each friendship will be represented by an edge.
          That is, two vertices will be adjacent
          (there will be an edge between them)
          if and only if the people represented by those vertices are friends.
                  <!-- We get the following graph: -->
      </p>

      <sidebyside width="20%" permid="lls">

        <image xml:id="gt-facebook" permid="rKy">

          <latex-image> \begin{tikzpicture}[scale=0.7]
        \draw(-1, 0) \vl{C} -- (0,1) \vb{E} -- (-1,2) \vl{A} -- (-1,0)(1,0) \vr{D} -- (0,1)  -- (1,2) \vr{B} -- (1,0);
      \end{tikzpicture}
          </latex-image>
        </image>

      </sidebyside>
    </solution>
  </example>


<example permid="sPR">
  <statement>
    <p permid="OxV">
      Each of three houses must be connected to each of three utilities.  What does the graph representing this situation look like?
    </p>
  </statement>
  <solution permid="pVl">
    <p permid="CjD">
          Think of the top row as the houses,
          bottom row as the utilities.
    </p>

    <sidebyside width="20%" permid="RsB">

      <image xml:id="gt-k33" permid="XRH">

        <latex-image> \begin{tikzpicture}[yscale=.8]
        \draw (-1,1) \v -- (-1,0)\v  -- (0,1) \v -- (0,0) \v -- (1,1) \v -- (1,0) \v -- (0,1) -- (-1,0) -- (1,1) (1,0) -- (-1,1) -- (0,0);
      \end{tikzpicture}
        </latex-image>
      </image>

    </sidebyside>

  </solution>
</example>

    <p>
      A natural question to ask about the houses and utilities graph is whether it would be possible to draw the graph without edges crossing.  This would be a reasonable request, so that city planers don't have to worry about the utility lines interfering with each other.  Of course in reality, we have three dimensions to work with.  But consider a computer motherboard, which connects various important components with wires smoldered to the board.  Can we connect the needed components without wires (literally) getting crossed?
    </p>

    <p>
      Graphs that can be drawn without edges crossing are called <term>planar</term> (since they can be nicely drawn in the <em>plane</em>).  A common question in graph theory is to determine whether a particular graph is planar or not. Also of interest is to discover properties that are true of all planar graphs.   
    </p>

    <question>
      <statement>
        <p>
          How many colors do you need to color the states in the map below so that bordering states are colored differently?
        </p>
        <sidebyside width="40%" margins="auto" permid="cFn">

          <image permid="uXm" xml:id="southwest-map">

            <latex-image> \begin{tikzpicture}[scale=.25]
          \USA[every state={draw=white, line width = .7pt, fill=white}, CA={fill=gray}, NV={fill=gray},NM={fill=gray},AZ={fill=gray},UT={fill=gray},CO={fill=gray},TX={fill=gray},KS={fill=gray},OK={fill=gray}];
          \end{tikzpicture}
            </latex-image>
          </image>

        </sidebyside>
      </statement>
    </question>

    <p>
      We can create a graph from the map above as follows: represent each state with a vertex, and make two vertices adjacent (i.e., put an edge between them) if the states the represent share a border.  Now coloring the map means coloring the vertices in such a way that adjacent vertices get different colors.  The smallest number of colors needed to color vertices in this way is called the <term>chromatic number</term> of the graph.  Interestingly, knowing that a graph is planar limits what the chromatic number can be, and the graph we get from a map will generally be planar.
    </p>

    <p>
      Let's consider another real world application of graphs.
    </p>

    <question>
      <statement>
        <p>
          Professor Nefario has invited 25 unsuspecting discrete math students to his estate for an evening of escape room fun.  Some of these students are already friends, but no student is friends with more than three other students.  The Professor wants to ensure that no friends are sent to the same escape room.  Can he be sure that four escape rooms will be enough?
        </p>
      </statement>
    </question>

    <p>
      In the scenario above, we can use vertices to represent students, and use edges to represent friendships.  What should we make of the other information in the question?  We want to assign students to one of four rooms so that no room contains students who are friends.  Aha!  Let's color the vertices using the same rule as our map: adjacent vertices cannot be colored the same.  This insures that no two friends are the same room.  So we are asking: is the chromatic number of this graph no more than four?
    </p>

    <p>
      There is no reason to think that the friendship graph is planar, so perhaps our answer depends on the actual friendships in the particular situation.  It turns out that it doesn't.  We haven't used all our information yet: no student is friends with more than three other students.  The number of edges coming out of a vertex is called the <term>degree</term> of the vertex (a nicer way to say this is the the degree is the number of edges <term>incident</term> to the vertex).  Later we will see that knowing about the degrees of vertices in a graph can tell us something about the chromatic number.
    </p>

    <question xml:id="ques-odd-friends">
      <statement>
        <p>
          Is it possible that among the 25 students, everyone has <em>exactly</em> three friends?
        </p>
      </statement>
    </question>

    <p>
      Another way to ask the above question is this: is there a graph with 25 vertices in which every vertex has degree 3?  Let's answer this right now.  No.
    </p>

    <p>
      How do we know?  Consider this: if there were a graph with 25 vertices, all of degree 3, then how many edges would the graph have?  At first, we might guess 75, since each vertex is incident to three edges, so  <m>3\cdot 25 = 75</m>.  But we have counted every edge exactly twice, since each edge is incident to exactly two vertices.  So in fact, there would be <m>75/2 = 37.5</m> edges.  That cannot happen!
    </p>
  <p permid="bxh">
    In general, if we know the degrees of all the vertices in a graph,
    we can find the number of edges.
    The sum of the degrees of all vertices will always be
    <em>twice</em> the number of edges,
    since each edge adds to the degree of two vertices.
    Notice this means that the sum of the degrees of all vertices in any graph must be even!
  </p>
  
  <p permid="HEq">
    This is our first example of a general result about all graphs.  It seems innocent enough, but we will use it to prove all sorts of other statements.  So let's give it a name and state it formally.
  </p>
  
  <lemma xml:id="lem-handshake" permid="EQO">
    <title>Handshake Lemma</title> 
    <idx><h>handshake lemma</h></idx>   
    <idx><h>degree sum formula</h></idx>
    <statement>
      <p permid="RtB">
        In any graph, the sum of the degrees of vertices in the graph is always twice the number of edges.
      </p>
    </statement>
  </lemma>
  
  <p permid="nLz">
    The handshake lemma<fn>A <em>lemma</em> is a mathematical statement that is primarily of importance in that it is used to establish other results.</fn> is sometimes called the <em>degree sum formula</em>, and can be written symbolically as <me permid="pAM">
      \sum_{v\in V} d(v) = 2e
    </me>.
    Here we are using the notation <m>d(v)</m> for the degree of the vertex <m>v</m>.
  </p>
  
  <p permid="TSI">
    One use for the lemma is to actually find the number of edges in a graph.  To do this, you must be given the <term>degree sequence</term> for the graph (or be able to find it from other information).  This is a list of every degree of every vertex in the graph, generally written in non-increasing order.
  </p>
  
  <example permid="JAH">
    <statement>
      <p permid="aNn">
        How many vertices and edges must a graph have if its degree sequence is <me permid="VHV">
          (4, 4, 3, 3, 3, 2, 1)
        </me>?
      </p>
    </statement>
    <solution permid="PZN">
      <p permid="sQR">
        The number of vertices is easy to find: it is the number of degrees in the sequence: 7.  To find the number of edges, we compute the degree sum:
        <me permid="BPe">
          4 + 4 + 3 + 3 + 3 + 2 + 1 = 20
        </me>,
        so the number of edges is half this: 10.
      </p>
    </solution>
  </example>

  <p permid="zZR">
    In our explanation of <xref ref="ques-odd-friends"/>, we used the handshake lemma to prove that something is impossible.  Generalizing this we get the following proposition.<fn>A <term>proposition</term> is a general statement in mathematics, similar to a theorem, although generally of lesser importance.</fn> 
  </p>
  
  <proposition xml:id="prop-evensum" permid="YJF">
    <statement>
      <p permid="lms">
        In any graph, the number of vertices with odd degree must be even.
      </p>
    </statement>
    <proof permid="rxd">
      <p permid="Ffj">
        Suppose there were a graph with an odd number of vertices with odd degree.  Then the sum of the degrees in the graph would be odd, which is impossible, by the handshake lemma.
      </p>
    </proof>
  </proposition>

<!-- 
  <p permid="Moj">
    We will consider further applications of the handshake lemma in the exercises.
  </p> -->

  <p>
    Let's conclude with a different sort of question about graphs.
  </p>

  <question xml:id="ques-four-vertex-count">
    <statement>
      <p>
        How many different graphs are there with four vertices?
      </p>
    </statement>
  </question>

  <p>
    At first, this might seem like a question purely about graphs, but it is easy enough to see how this would apply to a real world situation: You want to design a network using four routers as access points.  You could connect some or all pairs of routers using wired connections, or wireless connections.  How many different configurations are possible.
  </p>

  <p>
    To fully answer <xref ref="ques-four-vertex-count"/>, we will first need to be more careful about how we define graphs and what it means for two graphs to be <q>different.</q>  We will do this in <xref ref="sec_gt-carefully"/> after we consider sets and functions, the tools needed to give these careful definitions.
  </p>

</subsection>

 
<subsection>
  <title>Types of graphs</title>
  
  <p>
    Let's agree upon some more common terminology in discussing graphs and, in particular, particular types of graphs.
  </p>

  <p>
    Some of the graphs we have seen in the examples above have the property that between any two vertices, there is at most one edge.  
    Graphs like these are sometimes called <term>simple graphs</term>.  When a graph is allowed to have more than one edge between vertices, we might call it a <term>multigraph</term>.  We will decide later whether <q>graph</q> should always mean simple graph or can include multigraphs: this will be a consequence of the careful definition we choose.  Similarly, should we allow an edge to connect a vertex back to itself?  We might call a graph including these single edge loops a <term>pseudograph</term>.
  </p>

  <p permid="jbG">
    Must it always be possible to travel from any vertex in a graph to any other vertex along some sequence of edges?  If so, we say the graph is <term>connected</term>.
        <idx><h>connected</h></idx>
    A graph that is not connected might look like two separate graphs drawn close together. 
    For example,
    the following graph is NOT connected because there is no path from <m>a</m> to <m>b</m>:
  </p>

  <sidebyside width="33%" permid="fiL">

    <image xml:id="ex-gt-non-connected" permid="Zmv">

			<latex-image>

				\begin{tikzpicture}
					\draw (-1.5,0) \vl{\footnotesize $a$} -- (-.5, 1) \v -- (.5, 0) \v -- (-.5,-1) \v -- cycle;
					\draw (-.5,0) \v -- (.5,1) \v -- (1.5,0) \vr{\footnotesize $b$} -- (.5,-1) \v -- cycle;
				\end{tikzpicture}

			</latex-image>
    </image>

  </sidebyside>
  <p>
    We will want to say that the above graph is just one graph, that happens to have two <term>connected components</term>.  There is good reason to allow non-connected graphs: in a computer network, it is natural to ask whether every computer is connected to every other.  You might even want some computers on their own component (if you are developing network hacking software and don't want to destroy the entire network by mistake).
  </p>

  <p permid="PiP">
    What is the largest number of edges you can have in a (simple) graph?
    If we add all possible edges,
    then the resulting graph is called <term>complete</term>.
        <idx><h>complete graph</h></idx>
    That is, a graph is complete provided all vertices are adjacent.  Everyone is friends with everyone else.  
    We give these a special name: <m>K_n</m> 

    <notation>
      <usage>K_n</usage>
      <description>the complete graph on <m>n</m> vertices</description>
    </notation>

    is the complete graph on <m>n</m> vertices.
  </p>

  <p permid="vpY">
    Each vertex in <m>K_n</m> is adjacent to <m>n-1</m> other vertices, so the degree of each vertex is <m>n-1</m>.  The handshake lemma tells us how to find the number of edges:  the sum of the degrees is  <m>n(n-1)</m>,
    since we count <m>n-1</m> edges <m>n</m> times
    (once for each vertex).  This is twice the number of edges (since each edge is incident to 2 vertices,
    so we counted every edge exactly twice).
    Thus there are <m>n(n-1)/2</m> edges in <m>K_n</m>.
  </p>

  <p>
    What about the other extreme: how few edges can a graph with <m>n</m> vertices have?  That's easy.  Since we didn't say that graph had to be connected, the answer is zero!  What if the graph had to be connected?  We will answer this question in <xref ref="sec_trees"/> when we study a special type of graph called a <term>tree</term>.  For now, we can at least say what this is.
  </p>

  <p>
    We define a <term>tree</term> to be a <em>connected</em> graph with no <em>cycles</em>.  What should a cycle be?  This is a bit hard to define at this point, but the name should give a good idea what it means.  Is it possible to put your pencil on some vertex and trace along edges, moving around the graph, until you eventually get back to where you started?  The <q>path</q> you traced out is a <term>cycle</term> (strictly speaking, you must not have repeated any edges or vertices except your start/stop vertex).
  </p>

  <p>
    The name <q>tree</q> is a good one: if you draw a connected graph with no cycles, it might very well look a bit like a tree, with edges branching out.  Trees don't grow back in on themselves (that would be a cycle in the graph).  We extend this analogy: the vertices of degree one in a tree are called <term>leaves</term>.  
  </p>

  <p>
    If a graph contains no cycles but is not necessarily connected, we call the graph a <term>forest</term>.  What is each connected component of a forest?  A tree!
  </p>

  <p>
    Some trees also get special names.  If the tree contains exactly two leaves and every other vertex has degree 2, then we call it a <term>path</term>.  We use the notation <m>P_n</m> to denote the path with <m>n</m> <em>edges</em> (this means that <m>P_n</m> contains <m>n+1</m> vertices).  On the other extreme, if a tree contains only one non-leaf, we call it a <term>star</term>, and use the notation <m>S_n</m> for the star with <m>n</m> leaves (so again, <m>n+1</m> vertices).
  </p>

  <p>
    There are lots of other amusingly named graphs: caterpillar graphs, jellyfish graphs, comb graphs, wheel graphs, snarks, butterfly graphs, claw graphs, daisy graphs, lollipop graphs, ladder graphs, and tadpole graphs.  Even better, there is nothing stopping you from defining a new sort of graph and discovering its properties.
  </p>

  <p permid="svs">
    One final definition: we say a graph is <term>bipartite</term>
        <idx><h>bipartite</h></idx>
    if the vertices can be divided into two sets, <m>A</m> and <m>B</m>,
    with no two vertices in <m>A</m> adjacent and no two vertices in <m>B</m> adjacent.
    The vertices in <m>A</m> can be adjacent to some or all of the vertices in <m>B</m>.
    If each vertex in <m>A</m> is adjacent to all the vertices in <m>B</m>,
    then the graph is a <term>complete bipartite graph</term>,
    and gets a special name:
    <m>K_{m,n}</m>, where <m>|A| = m</m> and <m>|B| = n</m>.
    The graph in the houses and utilities puzzle is <m>K_{3,3}</m>.  Note: not all bipartite graphs are be <m>K_{m,n}</m>; those are only the complete bipartite graphs. 
  </p>

	<!-- TODO: give picture example of bipartite and not bipartite graphs -->
  <paragraphs permid="nSD">
    <title>Named Graphs</title>
    <p permid="fxg">
      Some graphs are used more than others, and get special names.
      <dl width="narrow" permid="Ivo">
        <li permid="gXY">
          <title><m>K_n</m></title>
          <p permid="kCy">
            The complete graph on <m>n</m> vertices.

            <notation>
              <usage>K_n</usage>
              <description>the complete graph on <m>n</m> vertices.</description>
            </notation>

          </p>
        </li>

        <li permid="Nfh">
          <title><m>K_{m,n}</m></title>
          <p permid="QJH">
            The complete bipartite graph with sets of <m>m</m> and <m>n</m> vertices.

            <notation>
              <usage>K_{m,n}</usage>
              <description>the complete bipartite graph of of <m>m</m> and <m>n</m> vertices.</description>
            </notation>

          </p>
        </li>

        <li permid="tmq">
          <title><m>C_n</m></title>
          <p permid="wQQ">
            The cycle on <m>n</m> vertices, just one big loop.

            <notation>
              <usage>C_n</usage>
              <description>the cycle on <m>n</m> vertices</description>
            </notation>

          </p>
        </li>

        <li oldPERMID="Kjb" permid="Ztz">
          <title><m>P_n</m></title>
          <p oldPERMID="NNB" permid="cXZ">
            The path on <m>n+1</m> vertices
            (so <m>n</m> edges),
            just one long path.

            <notation>
              <usage>P_n</usage>
              <description>the path on <m>n+1</m> vertices</description>
            </notation>

          </p>
        </li>
      </dl>
    </p>

    <sidebyside widths="18% 20% 15% 24%" margins="auto" valign="bottom" permid="sCw">

      <image permid="FtE">

				<latex-image>
					\begin{tikzpicture}[scale=1]
	  \path (0,0) +(18:1) coordinate (a);
	  \path (0,0) +(90:1) coordinate (b);
	  \path (0,0) +(162:1) coordinate (c);
	  \path (0,0) +(234:1) coordinate (d);
	  \path (0,0) +(306:1) coordinate (e);
	  \draw  (a) \v -- (b) \v -- (c) \v -- (d) \v -- (e) \v -- (a) -- (c) -- (e) -- (b) -- (d) -- (a);
	  \draw (0,-1.35) node[below]{ \(K_5\)};
	\end{tikzpicture}
				</latex-image>
      </image>

      <image permid="lAN">

				<latex-image>
					\begin{tikzpicture}[scale=.6, xscale=1.5]
	 \draw  (-1, 0) \v -- (-.5,2) \v -- (0,0) \v -- (.5, 2) \v -- (1,0) \v -- (-.5,2) (.5,2) -- (-1,0);
	 \draw (0,-.5) node[below]{ \(K_{2,3}\)};
	  \end{tikzpicture}
				</latex-image>
      </image>

      <image permid="RHW">

				<latex-image>
					\begin{tikzpicture}[scale=.6]
	  \draw  (0:1) \v -- (60:1) \v -- (120:1) \v -- (180:1) \v -- (240:1) \v -- (300:1) \v -- cycle;
	  \draw (270:1.5) node[below]{ \(C_6\)};
	\end{tikzpicture}
				</latex-image>
      </image>

      <image oldPERMID="gPu" permid="xPf">

				<latex-image>
					\begin{tikzpicture}[scale=.6]
	  \draw  (-2,0) \v -- (-1,.5) \v -- (0,0) \v -- (1,.75) \v -- (.5,1.5) \v -- (2,2) \v;
	  \draw (0,-.5) node[below]{ \(P_5\)};
	\end{tikzpicture}
				</latex-image>
      </image>

    </sidebyside>
  </paragraphs>

  <paragraphs oldPERMID="drY" permid="TZM">
    <title>Graph Theory Definitions</title>
    <p permid="LEp">
      There are a lot of definitions to keep track of in graph theory.
      Here is a glossary of the terms we have already used or will soon encounter.
      <dl width="medium" permid="oCx">
        <li permid="FAI">
          <title>Graph</title>
          <p permid="Jfi">
              <idx><h>graph</h></idx>
          A collection of
          <term>vertices</term>, some of which are connected by
          <term>edges</term>.
          More precisely, a pair of sets <m>V</m> and <m>E</m> where <m>V</m> is a set of vertices and <m>E</m> is a set of 2-element subsets of <m>V</m>.
          </p>
        </li>

        <li permid="lHR">
          <title>Adjacent</title>
          <p permid="pmr">
              <idx><h>adjacent</h></idx>
          Two vertices are
          <term>adjacent</term> if they are connected by an edge.
          Two edges are
          <term>adjacent</term> if they share a vertex.
          </p>
        </li>

        <li permid="RPa">
          <title>Bipartite graph</title>
          <p permid="VtA">
              <idx><h>bipartite</h></idx>
          A graph for which it is possible to divide the vertices into two disjoint sets such that there are no edges between any two vertices in the same set.
          </p>
        </li>

        <li permid="xWj">
          <title>Complete bipartite graph</title>
          <p permid="BAJ">
            A bipartite graph for which every vertex in the first set is adjacent to every vertex in the second set.  Each bipartite graph is <m>K_{m,n}</m> for some <m>m</m> and <m>n</m>.
          </p>
        </li>

        <li permid="eds">
          <title>Complete graph</title>
          <p permid="hHS">
              <idx><h>complete graph</h></idx>
          A graph in which every pair of vertices is adjacent.  We write <m>K_n</m> for the complete graph with <m>n</m> vertices.
          </p>
        </li>

        <li permid="KkB">
          <title>Connected</title>
          <p permid="NPb">
              <idx><h>connected</h></idx>
          A graph is
          <term>connected</term> if there is a path from any vertex to any other vertex.
          </p>
        </li>

        <li permid="qrK">
          <title>Chromatic number</title>
          <p permid="tWk">
              <idx><h>chromatic number</h></idx>
          The minimum number of colors required in a proper vertex coloring of the graph.
          </p>
        </li>

        <li permid="WyT">
          <title>Cycle</title>
          <p permid="adt">
              <idx><h>cycle</h></idx>
          A path (see below) that starts and stops at the same vertex, but contains no other repeated vertices.
          </p>
        </li>

        <li permid="CGc">
          <title>Degree of a vertex</title>
          <p permid="GkC">
              <idx><h>degree</h></idx>
          The number of edges incident to a vertex.
          </p>
        </li>

        <li permid="iNl">
          <title>Euler path</title>
          <p permid="mrL">
              <idx><h>Euler path</h></idx>
            A walk which uses each edge exactly once.
          </p>
        </li>

        <li permid="OUu">
          <title>Euler circuit</title>
          <p permid="SyU">
              <idx><h>Euler circuit</h></idx>
          An Euler path which starts and stops at the same vertex.
          </p>
        </li>

        <li permid="vbD">
          <title>Multigraph</title>
          <p permid="yGd">
              <idx><h>multigraph</h></idx>
          A
          <term>multigraph</term>
          is just like a graph but can contain multiple edges between two vertices as well as single edge loops
          (that is an edge from a vertex to itself).
          </p>
        </li>

        <li permid="biM">
          <title>Path</title>
              <idx><h>path</h></idx>
          <p permid="eNm">
            A <term>path</term> is a walk that doesn't repeat any vertices
            (or edges)
            except perhaps the first and last.
            If a path starts and ends at the same vertex,
            it is called a <term>cycle</term>.
          </p>
        </li>

        <li permid="HpV">
          <title>Planar</title>
          <p permid="KUv">
              <idx><h>planar</h></idx>
          A graph which can be drawn (in the plane) without any edges crossing.
          </p>
        </li>

        <li permid="nxe">
          <title>Subgraph</title>
          <p permid="rbE">
              <idx><h>subgraph</h></idx>
            We say that <m>H</m> is a
            <term>subgraph</term> of <m>G</m> if every vertex and edge of <m>H</m> is also a vertex or edge of <m>G</m>.
            We say <m>H</m> is an
            <term>induced</term> subgraph of <m>G</m> if every vertex of <m>H</m> is a vertex of <m>G</m>
            and
            each pair of vertices in <m>H</m> are adjacent in <m>H</m> if and only if they are adjacent in <m>G</m>.
          </p>
        </li>

        <li permid="TEn">
          <title>Tree</title>
          <p permid="XiN">
              <idx><h>tree</h></idx>
            A connected graph with no cycles. (If we remove the requirement that the graph is connected, the graph is called a
            <term>forest</term>.) The vertices in a tree with degree 1 are called
            <term>leaves</term>.
          </p>
        </li>

        <li permid="zLw">
          <title>Vertex coloring</title>
          <p permid="DpW">
              <idx><h>vertex coloring</h></idx>
          An assignment of colors to each of the vertices of a graph.
            A vertex coloring is
      <term>proper</term> if adjacent vertices are always colored differently.
          </p>
        </li>

        <li permid="fSF">
          <title>Walk</title>
          <p permid="jxf">
              <idx><h>walk</h></idx>
            A sequence of vertices such that consecutive vertices (in the sequence) are adjacent (in the graph).
            A walk in which no edge is repeated is called a <term>trail</term>,
            and a trail in which no vertex is repeated
            (except possibly the first and last)
            is called a <term>path</term>.
          </p>
        </li>
      </dl>
    </p>
  </paragraphs>
  </subsection>

  <xi:include href="exercises/gt-intro.ptx"/>
</section>
