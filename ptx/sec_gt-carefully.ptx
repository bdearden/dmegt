<?xml version="1.0" encoding="UTF-8"?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_gt-carefully" permid="HLu">
<title>Graphs Done Right</title>
<introduction>
    
<investigation permid="LpU">
  <p permid="nbF">
      Which (if any) of the graphs below are the same?
  </p>

  <sidebyside width="18%" margins="auto" valign="bottom" permid="VOZ">

    <image permid="hWn">

      <latex-image>
					\begin{tikzpicture}
	\coordinate (A) at (-1,0);
	\coordinate (B) at (0,0);
	\coordinate (C) at (1,0);
	\coordinate (D) at (-.5,1);
	\coordinate (E) at (.5,1);

	\draw (A) -- (D) -- (B) -- (E) -- (C) -- (D) (A) -- (E);
	\foreach \x in {(A), (B), (C), (D), (E)}{
		\fill \x \v;
	}
	\end{tikzpicture}
      </latex-image>
    </image>

    <image permid="Odw">

      <latex-image>
					\begin{tikzpicture}
	\coordinate (A) at (90+360/5:1);
	\coordinate (B) at (90+2*360/5:1);
	\coordinate (C) at (90+3*360/5:1);
	\coordinate (D) at (90+4*360/5:1);
	\coordinate (E) at (90:1);

	\draw (A) -- (B) -- (C) -- (D) -- (E) -- (A);
	\foreach \x in {(A), (B), (C), (D), (E)}{
		\fill \x \v;
	}
	\end{tikzpicture}
      </latex-image>
    </image>

    <image permid="ukF">

      <latex-image>
					\begin{tikzpicture}
	\coordinate (A) at (-1,0);
	\coordinate (B) at (0,1);
	\coordinate (C) at (0,0);
	\coordinate (D) at (0,-1);
	\coordinate (E) at (1,0);

	\draw (A) -- (B) -- (E) -- (C) -- (A) -- (D) -- (E);
	\foreach \x in {(A), (B), (C), (D), (E)}{
		\fill \x \v;
	}
	\end{tikzpicture}
      </latex-image>
    </image>

    <image permid="arO">

      <latex-image>
					\begin{tikzpicture}
	\coordinate (A) at (90+360/5:1);
	\coordinate (B) at (90+2*360/5:1);
	\coordinate (C) at (90+3*360/5:1);
	\coordinate (D) at (90+4*360/5:1);
	\coordinate (E) at (90:1);

	\draw (A) -- (C) -- (E) -- (B) -- (D) -- (A);
	\foreach \x in {(A), (B), (C), (D), (E)}{
		\fill \x \v;
	}
	\end{tikzpicture}
      </latex-image>
    </image>

    <image permid="GyX">

      <latex-image>
					\begin{tikzpicture}
	\coordinate (A) at (-1,0);
	\coordinate (B) at (0,1);
	\coordinate (C) at (0,0);
	\coordinate (D) at (0,-1);
	\coordinate (E) at (1,0);

	\draw (A) -- (C) -- (B) (D) -- (C) -- (E);
	\foreach \x in {(A), (B), (C), (D), (E)}{
		\fill \x \v;
	}
	\end{tikzpicture}
      </latex-image>
    </image>

  </sidebyside>

  <p permid="TiO">
      The graphs above are unlabeled.
      Usually we think of a graph as having a specific set of vertices.
      Which (if any) of the graphs below are the same?
  </p>

  <sidebyside width="18%" margins="auto" valign="bottom" permid="BWi">

    <image permid="mGg">

      <latex-image>
					\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,0);
\coordinate (D) at (0,1);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);

\draw (A) node[below] {\(a\)} -- (B) node[above] {\(b\)} -- (C) node[below] {\(c\)} -- (D) node[above] {\(d\)} -- (E) node[below] {\(e\)} -- (F) node[above] {\(f\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}
      </latex-image>
    </image>

    <image permid="SNp">

      <latex-image>
					\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,1);
\coordinate (D) at (0,0);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);

\draw (A) node[below] {\(a\)} -- (B) node[above] {\(b\)} -- (C) node[above] {\(c\)} -- (D) node[below] {\(d\)} -- (E) node[below] {\(e\)} -- (F) node[above] {\(f\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}
      </latex-image>
    </image>

    <image permid="yUy">

      <latex-image>
					\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,0);
\coordinate (D) at (0,1);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);

\draw (A) node[below] {\(a\)} -- (B) node[above] {\(c\)} -- (C) node[below] {\(e\)} -- (D) node[above] {\(b\)} -- (E) node[below] {\(d\)} -- (F) node[above] {\(f\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}
      </latex-image>
    </image>

    <image permid="fbH">

      <latex-image>
					\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,1);
\coordinate (D) at (0,0);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);

\draw (A) node[below] {\(v_6\)} -- (B) node[above] {\(v_1\)} -- (C) node[above] {\(v_2\)} -- (D) node[below] {\(v_5\)} -- (E) node[below] {\(v_4\)} -- (F) node[above] {\(v_3\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}
      </latex-image>
    </image>

  </sidebyside>

  <p permid="zpX">
      Another way you might represent a graph is to say what the vertices are and then say what the edges are.
			Are the graphs below the same or different?
    <dl width="narrow" permid="cof">
      <li permid="UJG">
        <title>Graph 1:</title>
        <p permid="LZO">
          <m>V = \{a, b, c, d, e\}</m>,
        </p>

        <p permid="sgX">
          <m>E = \{\{a,b\}, \{a, c\}, \{a,d\}, \{a,e\}, \{b,c\}, \{d,e\}\}</m>.
        </p>
      </li>

      <li permid="AQP">
        <title>Graph 2:</title>
        <p permid="Yog">
          <m>V = \{v_1, v_2, v_3, v_4, v_5\}</m>,
        </p>

        <p permid="Evp">
          <m>E = \{\{v_1, v_3\}, \{v_1, v_5\}, \{v_2, v_4\}, \{v_2, v_5\}, \{v_3, v_5\}, \{v_4, v_5\}\}</m>.
        </p>
      </li>
    </dl>
  </p>
</investigation>

  <p>
    In <xref ref="sec_gt-intro"/> we started playing with graphs and saw how these can be used to model problems: answering questions about a graph can answer a question about another problem.  Thus studying graphs in general can allow us to understand the objects they represent better.
  </p>

  <p>
    However, we quickly realized that the answers about graphs depend on what exactly we count as a graph.  Here are a few lingering questions we might worry about:
    <ul>
      <li>
        <p>
          Are graphs allowed to have multiple edges between two vertices?  
        </p>
      </li>
      <li>
        <p>
          What does it mean for two graphs to be <q>different</q>?
        </p>
      </li>
      <li>
        <p>
          In what ways can two different graphs be related?  Can we make sense of one graph as being part of another?
        </p>
      </li>
      <li>
        <p>
          Should a disconnected graph be one graph or two graphs?
        </p>
      </li>
      <li>
        <p>
          What is a <q>path</q> through a graph?  Can it repeat edges or vertices?  
        </p>
      </li>
    </ul>
  </p>
  <p>
    The way to resolve these questions and ones like them is to simply make a decision.  We are the ones deciding to use graphs to model problems, so we get to decide what should count as a graph.  But we should strive for agreement, and hopefully make a decision that is useful.
  </p>

  <p>
    The way we resolve these decisions is by providing <em>definitions</em>.  These definitions will build off each other, and off of other definitions.  This is why we needed to wait until considering sets and functions: we will define a graph in terms of sets (and apply functions to graphs for other purposes).  Crafting good definitions is not easy,
    but it is incredibly important.
    The definition is the agreed upon starting point from which all truths in mathematics proceed.
    Is there a graph with no edges?
    We have to look at the definition to see if this is possible.
  </p>
</introduction>

<subsection xml:id="subsec-definition-of-a-graph">
  <title>Definition of a Graph</title>
  
  <p permid="IJJ">
    We want our definition to be precise and unambiguous,
    but it also must agree with our intuition for the objects we are studying.
    It needs to be useful: we <em>could</em>
    define a graph to be a six legged mammal,
    but that would not let us solve any problems about bridges.
    Instead, here is the (now) standard definition of a graph.
  </p>

  <definition permid="AgV">
    <title>Graph Definition</title>
    <p permid="rLy">
      A <term>graph</term> is an ordered pair
      <m>G = (V, E)</m> consisting of a nonempty set <m>V</m>
      (called the <term>vertices</term>)
      and a set <m>E</m>
      (called the <term>edges</term>)
      of two-element subsets of <m>V</m>.
    </p>
  </definition>

  <p permid="oQS">
    Strange.
    Nowhere in the definition is there talk of dots or lines.
    From the definition, a graph could be
    <me permid="YCB">
      (\{a,b,c,d\}, \{\{a,b\}, \{a,c\}, \{b,c\}, \{b,d\}, \{c,d\}\})
    </me>.
    Here we have a graph with four vertices
    (the letters <m>a, b, c, d</m>)
    and five edges (the pairs <m>\{a,b\}, \{a,c\}, \{b,c\}, \{b,d\}, \{c,d\})</m>).
  </p>

  <p permid="UYb">
    Looking at sets and sets of 2-element sets is difficult to process.
    That is why we often draw a representation of these sets.
    We put a dot down for each vertex,
    and connect two dots with a line precisely when those two vertices are one of the 2-element subsets in our set of edges.
    Thus one way to draw the graph described above is this:
  </p>

  <sidebyside width="25%" permid="idr">

    <image permid="LiQ">

      <latex-image> \begin{tikzpicture}[scale=0.7]
	    \draw  (-1,1) \vl{\(a\)} -- (1,1) \vr{\(b\)} (-1,1) -- (-1,-1) \vl{\(c\)} -- (1,-1) \vr{\(d\)} -- (1,1) -- (-1,-1);
	  \end{tikzpicture}
      </latex-image>
    </image>

  </sidebyside>

  <p permid="Bfk">
    However we could also have drawn the graph differently.
    For example either of these:
  </p>

  <sidebyside widths="20% 25%" margins="auto" valign="bottom" permid="OkA">

    <image permid="rpZ">

      <latex-image> \begin{tikzpicture}[scale=0.7]
	    \draw  (-1,1) \vl{\(a\)} -- (1,-1) \vr{\(b\)} (-1,1) -- (-1,-1) \vl{\(c\)} -- (1,1) \vr{\(d\)} -- (1,-1) -- (-1,-1);
	  \end{tikzpicture}
      </latex-image>
    </image>

    <image permid="Xxi">
      <!-- TODO: fix the lables to make them have the same baseline. -->
      <latex-image> \begin{tikzpicture}[scale=0.7]
	    \draw  (-1.5,0) \v -- (-.5,0) \v (-1.5,0) .. controls (-.5,1) .. (.5,0) \v -- (1.5,0) \v .. controls (.5,1) .. (-.5,0) -- (.5,0);
      {\footnotesize
      \draw (-1.5, -.75) node[above]{\(a\)} (-.5,-.75) node[above]{\(b\)} (.5,-.75) node[above]{\(c\)} (1.5, -.75) node[above]{\(d\)};
      }
	  \end{tikzpicture}
      </latex-image>
    </image>

  </sidebyside>

  <p>
    We can now answer the question of whether graphs can have two (or more) edges between a given pair of vertices.  From the definition, we see this cannot happen.  How would we represent a double edge?  It would mean having, say, <m>\{u,v\}</m> appear twice as an edge in our list of edges.  But we don't have a <em>list</em> of edges, we have a <em>set</em> of edges.  The <em>set</em> <m>E</m> either contains a particular edge or not (it cannot contain any element more than once).
  </p>

  <p>
    Similarly, there cannot be edges connecting a vertex to itself: this would be an <q>edge</q> <m>\{v,v\}</m>. Since edges are two-element <em>sets</em>, that is not allowed because <m>\{v,v\}</m> is the set <m>\{v\}</m>, which only has one element.
  </p>

  <p>
    This is not to say that allowing these possibilities is a bad idea.  There are times when such <q>edges</q> should be permitted.  However, we would then be looking at a mathematical structure different from a graph.  We will call such structures <term>multigraphs</term>, since the collection of edges <m>E</m>, and even the individual edges, are <em>multisets</em>.
  </p>

  <p>
    Another interesting structure, which we will not consider in this book other than right here, is a <term>directed graph</term>.  Edges in graph do not have direction, but it might be useful to specify one (like if we are modeling streets in a city, some of which are one-ways).  We would define a directed graph by making each edge an ordered pair of two elements instead of a set of two elements.
  </p>
</subsection>

<subsection xml:id="subsec-when-are-graphs-the-same">
  <title>When Are Graphs the Same?</title>

  <p permid="hmt">
    We should be careful about what it means for two graphs to be
    <q>the same.</q> Actually,
    given our definition, this is easy: Are the vertex sets equal?
    Are the edge sets equal?
    We know what it means for sets to be equal,
    and graphs are nothing but a pair of two special sorts of sets.
  </p>

  <example permid="kXX">
    <statement>
      <p permid="xAK">
        Are the graphs below equal?
        <me permid="EJK">
          G_1 = (\{a,b,c\}, \{\{a,b\}, \{b,c\}\}); \qquad G_2 = (\{a,b,c\}, \{\{a,c\}, \{c, b\}\})
        </me>.
      </p>
    </statement>
    <solution permid="XEm">
      <p permid="PEo">
        No.
        Here the vertex sets of each graph are equal, which is a good start.
        Also, both graphs have two edges.
        In the first graph, we have edges <m>\{a,b\}</m> and <m>\{b,c\}</m>,
        while in the second graph we have edges	<m>\{a,c\}</m> and 	<m>\{c,b\}</m>.
        Now we do have <m>\{b,c\} = \{c,b\}</m>,
        so that is not the problem.
        The issue is that <m>\{a,b\} \ne \{a,c\}</m>.
        Since the edge sets of the two graphs are not equal
        (as sets),
        the graphs are not equal
        (as graphs).
      </p>
    </solution>
  </example>

  <p permid="NtC">
    Even if two graphs are not <em>equal</em>,
    they might be <em>basically</em> the same.
    The graphs in the previous example could be drawn like this:
  </p>

  <sidebyside width="60%" permid="urJ">

    <image permid="DEr">

      <latex-image>

					\begin{tikzpicture}
					\draw (-3,0) \vb{\footnotesize $a$} -- (-2,0) \vb{\footnotesize $b$} -- (-1,0) \vb{\footnotesize $c$}  (3,0) \vb{\footnotesize $b$} -- (2,0) \vb{\footnotesize $c$} -- (1,0) \vb{$\footnotesize a$};
					\node[above] at (-3,.5) {$G_1$} ;
					\node[above] at (1, .5) {$G_2$};
					\end{tikzpicture}

      </latex-image>
    </image>

  </sidebyside>

  <p permid="tAL">
    Graphs that are basically the same
    (but perhaps not equal)
    are called <term>isomorphic</term>.
    We will give a precise definition of this term after a quick example:
  </p>

  <example permid="Rfg">
    <statement>
      <p permid="dHT">
        Consider the graphs:

        <me permid="kQT">
          G_1 = (V_1, E_1) \text{ where }
          V_1 = \{a, b, c\} \text{ and } E_1 = \{\{a,b\}, \{a,c\}, \{b,c\}\};
        </me>

        <me permid="QYc">
          G_2 = (V_2, E_2) \text{ where }
          V_2 = \{u,v,w\} \text{ and }E_2 = \{\{u,v\}, \{u,w\}, \{v,w\}\}.
        </me>
      </p>

      <p permid="JPc">
        Are these graphs the same?
      </p>
    </statement>
    <solution permid="DLv">
      <p permid="vLx">
        The two graphs are NOT equal.
        It is enough to notice that <m>V_1 \ne V_2</m> since
        <m>a \in V_1</m> but <m>a \notin V_2</m>.
        However, both of these graphs consist of three vertices with edges connecting every pair of vertices.
        We can draw them as follows:
      </p>

      <sidebyside width="25%" margins="auto" valign="bottom" permid="ayS">

        <image permid="jLA">

          <latex-image>
						\begin{tikzpicture}
	\draw  (90:1) \va{\(a\)} -- (210:1) \vl{\(b\)} -- (-30:1) \vr{\(c\)} -- (90:1);
	\end{tikzpicture}
          </latex-image>
        </image>

        <image permid="PSJ">

          <latex-image>
						\begin{tikzpicture}
	\draw  (90:1) \va{\(u\)} -- (210:1) \vl{\(v\)} -- (-30:1) \vr{\(w\)} -- (90:1);
	\end{tikzpicture}
          </latex-image>
        </image>

      </sidebyside>

      <p permid="bSG">
        Clearly we want to say these graphs are basically the same,
        so while they are not equal, they will be <em>isomorphic</em>.
        We can rename the vertices of one graph and get the second graph as the result.
      </p>
    </solution>
  </example>

  <p permid="ZHU">
    Intuitively, graphs are <term>isomorphic</term>
    <idx>
      <h>isomorphic</h>
    </idx>
    if they are basically the same, or better yet,
    if they are the same except for the names of the vertices.
    To make the concept of renaming vertices precise,
    we give the following definitions:
  </p>

  <assemblage permid="goe">
    <idx>
      <h>isomorphic</h>
    </idx>
    <title>Isomorphic Graphs</title>
    <p permid="XSH">
      An <term>isomorphism</term>
      <idx>
        <h>isomorphism</h>
      </idx>
      between two graphs <m>G_1</m> and <m>G_2</m> is a bijection
      <m>f:V_1 \to V_2</m> between the vertices of the graphs such that
      <m>\{a,b\}</m> is an edge in <m>G_1</m> if and only if <m>\{f(a), f(b)\}</m> is an edge in <m>G_2</m>.
    </p>

    <p permid="DZQ">
      Two graphs are <term>isomorphic</term> if there is an isomorphism between them.
      In this case we write <m>G_1 \isom G_2</m>.
    </p>
  </assemblage>

  <p permid="FPd">
    An isomorphism is simply a function which renames the vertices.
    It must be a bijection so every vertex gets a new name.
    These newly named vertices must be connected by edges precisely when they were connected by edges with their old names.
  </p>

  <example permid="xmp">
    <statement>
      <p permid="pWl">
        Decide whether the graphs <m>G_1 = (V_1, E_1)</m> and
        <m>G_2 = (V_2, E_2)</m> are equal or isomorphic.
      </p>

      <p permid="Wdu">
        <m>V_1 = \{a,b,c,d\}</m>,
        <m>E_1 = \{\{a,b\}, \{a,c\}, \{a,d\}, \{c,d\}\}</m>
      </p>

      <p permid="CkD">
        <m>V_2 = \{a,b,c,d\}</m>,
        <m>E_2 = \{\{a,b\}, \{a,c\}, \{b,c\}, \{c,d\}\}</m>
      </p>
    </statement>
    <solution permid="jSE">
      <p permid="HZP">
        The graphs are NOT equal,
        since <m>\{a,d\} \in E_1</m> but <m>\{a,d\} \notin E_2</m>.
        However, since both graphs contain the same number of vertices and same number of edges,
        they <em>might</em> be isomorphic
        (this is not enough in most cases, but it is a good start).
      </p>

      <p permid="ogY">
        We can try to build an isomorphism.
        How about we say <m>f(a) = b</m>,
        <m>f(b) = c</m>,        <m>f(c) = d</m> and <m>f(d) = a</m>.
        This is definitely a bijection,
        but to make sure that the function is an isomorphism,
        we must make sure it <em>respects the edge relation</em>.
        In <m>G_1</m>,
        vertices <m>a</m> and <m>b</m> are connected by an edge.
        In <m>G_2</m>,        <m>f(a) = b</m> and
        <m>f(b) = c</m> are connected by an edge.
        So far, so good, but we must check the other three edges.
        The edge <m>\{a,c\}</m> in <m>G_1</m> corresponds to
        <m>\{f(a),
        f(c)\} = \{b,d\}</m>, but here we have a problem.
        There is no edge between <m>b</m> and <m>d</m> in <m>G_2</m>.
        Thus <m>f</m> is NOT an isomorphism.
      </p>

      <p permid="Uoh">
        Not all hope is lost, however.
        Just because <m>f</m> is not an isomorphism does not mean that there is no isomorphism at all.
        We can try again.
        At this point it might be helpful to draw the graphs to see how they should match up.
      </p>

      <sidebyside widths="23% 23%" margins="auto" valign="bottom" permid="GGb">

        <image permid="vZS">

          <latex-image>

							\begin{tikzpicture}
								\coordinate (a) at (90:1);
								\coordinate (b) at (0:1);
								\coordinate (c) at (-90:1);
								\coordinate (d) at (180:1);

								\draw (a) -- (b) (a) -- (c) (a) -- (d) (c) --(d);
								\draw (a) \va{\footnotesize $a$} (b) \vr{\footnotesize $b$} (c)\vb{\footnotesize $c$} (d) \vl{\footnotesize $d$};
								\node at (-1,1) {$G_1$:};
							\end{tikzpicture}

          </latex-image>
        </image>

        <image permid="chb">

          <latex-image>

							\begin{tikzpicture}
								\coordinate (a) at (90:1);
								\coordinate (b) at (0:1);
								\coordinate (c) at (-90:1);
								\coordinate (d) at (180:1);

								\draw (a) -- (b) (a) -- (c) (b) -- (c) (c) --(d);
								\draw (a) \va{\footnotesize $a$} (b) \vr{\footnotesize $b$} (c)\vb{\footnotesize $c$} (d) \vl{\footnotesize $d$};
								\node at (-1,1) {$G_2$:};
							\end{tikzpicture}

          </latex-image>
        </image>

      </sidebyside>

      <p permid="Avq">
        Alternatively, notice that in <m>G_1</m>,
        the vertex <m>a</m> is adjacent to every other vertex.
        In <m>G_2</m>,
        there is also a vertex with this property: <m>c</m>.
        So build the bijection <m>g:V_1 \to V_2</m> by defining <m>g(a) = c</m> to start with.
        Next, where should we send <m>b</m>?
        In <m>G_1</m>,
        the vertex <m>b</m> is only adjacent to vertex <m>a</m>.
        There is exactly one vertex like this in <m>G_2</m>, namely <m>d</m>.
        So let <m>g(b) = d</m>.
        As for the last two, in this example, we have a free choice:
        let <m>g(c) = b</m> and <m>g(d) = a</m>
        (switching these would be fine as well).
      </p>

      <p permid="gCz">
        We should check that this really is an isomorphism.
        It is definitely a bijection.
        We must make sure that the edges are respected.
        The four edges in <m>G_1</m> are
        <me permid="xfl">
          \{a,b\}, \{a,c\}, \{a,d\}, \{c,d\}
        </me>.
      </p>

      <p permid="MJI">
        Under the proposed isomorphism these become
        <me permid="dmu">
          \{g(a), g(b)\}, \{g(a), g(c)\}, \{g(a), g(d)\}, \{g(c), g(d)\}
        </me>
        <me permid="JtD">
          \{c,d\}, \{c,b\}, \{c,a\}, \{b,a\}
        </me>,
        which are precisely the edges in <m>G_2</m>.
        Thus <m>g</m> is an isomorphism, so <m>G_1 \cong G_2</m>
      </p>
    </solution>
  </example>

  <p permid="lWm">
    Sometimes we will talk about a graph with a special name
    (like <m>K_n</m> or the <em>Peterson graph</em>)
    or perhaps draw a graph without any labels.
    In this case we are really referring to <em>all</em>
    graphs isomorphic to any copy of that particular graph.
    A collection of isomorphic graphs is often called an
    <term>isomorphism class</term>.
    <idx>
      <h>isomorphism class</h>
    </idx>
    <fn>
    This is not unlike geometry,
    where we might have more than one copy of a particular triangle.
    There instead of <em>isomorphic</em>
    we say <em>congruent</em>.
    </fn>
  </p>
</subsection>

<subsection xml:id="subsec-subgraphs">
  <title>Subgraphs</title>
  

<p permid="Sdv">
    There are other relationships between graphs that we care about,
    other than equality and being isomorphic.
    For example, compare the following pair of graphs:
</p>

<sidebyside width="20%" margins="auto" permid="mNk">

  <image permid="Iok">

    <latex-image>\begin{tikzpicture}
			      \foreach \x in {0,...,6}
			      \draw  (\x*60:1) \v -- (\x*60+60:1) -- (\x*60+180:1) -- cycle;
			    \end{tikzpicture}</latex-image>
  </image>

  <image permid="ovt">

    <latex-image>\begin{tikzpicture}
			      \foreach \x in {0,...,4}
			      \draw  (\x*90:1) \v -- (\x*90+90:1) -- (\x*90+180:1) -- cycle;
			    \end{tikzpicture}</latex-image>
  </image>

</sidebyside>

<p permid="ykE">
    These are definitely not isomorphic,
    but notice that the graph on the right looks like it might be part of the graph on the left,
    especially if we draw it like this:
</p>

<sidebyside width="20%" permid="SUt">

  <image permid="UCC">

    <latex-image>\begin{tikzpicture}
						 \foreach \x in {0,...,6}
						 \draw[very thin]  (\x*60:1) \v -- (\x*60+60:1) -- (\x*60+180:1) -- cycle;
						 \draw[very thick] (0:1) -- (60:1) -- (180:1) -- (240:1) -- (0:1) -- (180:1) (60:1) -- (240:1);
					 \end{tikzpicture}</latex-image>
  </image>

</sidebyside>

<p permid="erN">
    We would like to say that the smaller graph is a
  <em>subgraph</em> of the larger.
</p>

<p permid="KyW">
    We should give a careful definition of this.
    In fact, there are two reasonable notions for what a subgraph should mean.
</p>

<assemblage permid="Mvn">
  <title>Subgraphs</title>
  <idx>
    <h>subgraph</h>
  </idx>
  <p>
      We say that <m>G' = (V', E')</m> is a <term>subgraph</term>
      of <m>G = (V, E)</m>, and write <m>G' \subseteq G</m>,
      provided <m>V' \subseteq V</m> and <m>E' \subseteq E</m>.
  </p>

  <p>
      We say that <m>G' = (V', E')</m> is an
    <term>induced subgraph</term>
    <idx>
      <h>subgraph</h>
      <h>induced</h>
    </idx>
    <idx>
      <h>induced subgraph</h>
    </idx>
      of <m>G = (V, E)</m> provided
    <m>V' \subseteq V</m> and every edge in <m>E</m> whose vertices are still in <m>V'</m> is also an edge in <m>E'</m>.
  </p>
</assemblage>



<example permid="dty">
  <statement>
    <p permid="irM">
        Consider the graphs:
    </p>

    <sidebyside widths="18% 18% 18% 18%" margins="auto" valign="bottom" permid="zbC">
      <!-- valigns="bottom bottom bottom bottom"> -->

      <image permid="AJL">

        <latex-image>\begin{tikzpicture}[yscale=.8]
						      \draw  (-1,0) \vb{\footnotesize $a$} -- (0,0) \vb{\footnotesize $b$} -- (1,0) \vb{\footnotesize $c$} -- (.5,1) \vb{\footnotesize $e$} -- (0,0) -- (-.5,1) \vb{\footnotesize $d$} -- (0,2) \vb{\footnotesize $f$} -- (.5,1) -- (-.5,1) -- (-1,0);
									\node[below] at (0,-.5) {$G_1$};
						    \end{tikzpicture}</latex-image>
      </image>

      <image permid="gQU">

        <latex-image>\begin{tikzpicture}[yscale=.8]
									\draw  (-1,0) \vb{\footnotesize $a$} -- (0,0) \vb{\footnotesize $b$} -- (1,0) \vb{\footnotesize $c$}  (0,0) -- (-.5,1) \vb{\footnotesize $d$} (-.5,1) -- (-1,0);
									\node[below] at (0,-.5) {$G_2$};
								\end{tikzpicture}</latex-image>
      </image>

      <image permid="MYd">

        <latex-image>\begin{tikzpicture}[yscale=.8]
									\draw  (-1,0) \vb{\footnotesize $a$} (0,0) \vb{\footnotesize $b$} -- (1,0) \vb{\footnotesize $c$}  (0,0) -- (-.5,1) \vb{\footnotesize $d$} -- (0,2) \vb{\footnotesize $f$} (-1,0) -- (-.5,1);
									\node[below] at (0,-.5) {$G_3$};
								\end{tikzpicture}</latex-image>
      </image>

      <image permid="tfm">

        <latex-image>\begin{tikzpicture}[yscale=.8]
									\draw  (-1,0) \vb{\footnotesize $a$} -- (0,0) \vb{\footnotesize $b$} -- (1,0) \vb{\footnotesize $c$} -- (.5,1) (0,0) -- (-.5,1) \vb{\footnotesize $d$} -- (0,2) \vb{\footnotesize $f$} -- (.5,1) (-.5,1) -- (-1,0);
									\node[below] at (0,-.5) {$G_4$};
								\end{tikzpicture}</latex-image>
      </image>

    </sidebyside>

    <p permid="OyV">
        Here both <m>G_2</m> and <m>G_3</m> are subgraphs of <m>G_1</m>.
        But only <m>G_2</m> is an <em>induced</em> subgraph.
        Every edge in <m>G_1</m> that connects vertices in <m>G_2</m> is also an edge in <m>G_2</m>.
        In <m>G_3</m>,
        the edge <m>\{a,b\}</m> is in <m>E_1</m> but not <m>E_3</m>,
        even though vertices <m>a</m> and <m>b</m> are in <m>V_3</m>.
    </p>

    <p permid="uGe">
        The graph <m>G_4</m> is NOT a subgraph of <m>G_1</m>,
        even though it looks like all we did is remove vertex <m>e</m>.
        The reason is that in <m>E_4</m> we have the edge <m>\{c,f\}</m> but this is not an element of <m>E_1</m>,
        so we don't have the required 	<m>E_4 \subseteq E_1</m>.
    </p>
  </statement>
</example>

<p permid="qGf">
    Notice that every induced subgraph is also an ordinary subgraph,
    but not reverse is not true.
    Think of a subgraph as the result of deleting some vertices and edges from the larger graph.
    For the subgraph to be an induced subgraph,
    we can still delete vertices,
    but now we only delete those edges that included the deleted vertices.
</p>

<paragraphs>
  <title>Paths and Cycles</title>
  <p>
    In <xref ref="sec_gt-intro"/>, we said a graph was <term>connected</term> if there was a <em>path</em> between any two vertices in the graph.  A graph was a <term>tree</term> if it was connected an contained no <em>cycles</em>.  What is a path and what is a cycle?
  </p>

  <p>
    Intuitively, you can think of a path as the result of tracing over a the edges of a graph, however it turns out that we will insist that you don't trace over any edge or vertex more than once.  A cycle then is just like a path except you stop where you started (and that is the only point where you can repeat a vertex).
  </p>

  <p>
    Let's try to be more precise.  We will define a path and a cycle in terms of subgraphs!  Recall two of our named graphs: <m>P_n</m> and <m>C_n</m> are themselves paths and cycles (each with <m>n</m> edges).
  </p>

  <definition xml:id="def-path">
    <statement>
      <p>
        A <term>path in a graph <m>G</m></term> is a subgraph of <m>G</m> isomorphic to <m>P_n</m> for some <m>n</m> (we say that <m>n</m> is the <term>length</term> of the path).
      </p>
      <p>
        We say that vertices <m>u</m> and <m>v</m> are <term>on a path</term>, or that there is a <term>path from <m>u</m> to <m>v</m>
        </term>, provided the subgraph isomorphic to <m>P_n</m> includes <m>u</m> and <m>v</m>.
      </p>
    </statement>
  </definition>

  <definition xml:id="def-cycle">
    <statement>
      <p>
        A <term>cycle in a graph <m>G</m></term> is a subgraph of <m>G</m> isomorphic to <m>C_n</m> for some <m>n</m> (we say that <m>n</m> is the <term>length</term> of the cycle).
      </p>
    </statement>
  </definition>
</paragraphs>

</subsection>



  <xi:include href="exercises/gt-carefully.ptx"/>
</section>
